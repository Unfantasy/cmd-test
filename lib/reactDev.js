

const program = require('commander');
program
  .option("--rem", "打包为rem")
  .option("--eslint", "是否开启 eslint 检查")
  .parse(process.argv);
  
const util = require('./util');
const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('react-dev-utils/clearConsole');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls,
} = require(util.mergePath(__dirname, 'webpackConfig/WebpackDevServerUtils'));
const openBrowser = require('react-dev-utils/openBrowser');
const paths = require(util.mergePath(__dirname, 'webpackConfig/paths'));
function reactDev(arg) {
  
  let remDev;
  let isEslint;
  // 是否将 px 转化为 rem
  if (program.rem) {
    console.log();
    console.log(chalk.cyan('当前模式：rem'));
    remDev = true;
  }

  if (program.eslint) {
    isEslint = true;
    console.log(chalk.cyan('eslint 已开启'));
  }

  // console.log('参数： ', arg);
  const devArg = typeof arg === 'string' ? arg : '';
  // Do this as the first thing so that any code reading it knows the right env.
  process.env.BABEL_ENV = 'development';
  process.env.NODE_ENV = 'development';

  // Makes the script crash on unhandled rejections instead of silently
  // ignoring them. In the future, promise rejections that are not handled will
  // terminate the Node.js process with a non-zero exit code.
  process.on('unhandledRejection', err => {
    throw err;
  });

  // Ensure environment variables are read.
  require(util.mergePath(__dirname, 'webpackConfig/env'));

  const config = require(util.mergePath(__dirname, 'webpackConfig/webpack.config.dev'))(devArg, { remDev, isEslint });
  // console.log('test----config : ', config);
  
  const createDevServerConfig = require(util.mergePath(__dirname, 'webpackConfig/webpackDevServer.config'));
  // const useYarn = fs.existsSync(paths.yarnLockFile);
  const isInteractive = process.stdout.isTTY;

  // Warn and crash if required files are missing
  const entryPaths = paths.entryPaths.map(v => (v.value));
  if (!checkRequiredFiles([paths.appHtml, ...entryPaths])) {
    process.exit(1);
  }

  // Tools like Cloud9 rely on this.
  const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
  const HOST = process.env.HOST || '0.0.0.0';

  // 启动项目名
  let index = paths.entryPaths.findIndex((entryPath) => (entryPath.key === devArg));
  if (index === -1) {
      index = 0;
  }
  const projectName = paths.entryPaths[index].key;

  // We attempt to use the default port but if it is busy, we offer the user to
  // run on a different port. `detect()` Promise resolves to the next free port.
  choosePort(HOST, DEFAULT_PORT)
    .then(port => {
      if (port == null) {
        // We have not found a port.
        return;
      }
      const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
      const appName = require(paths.appPackageJson).name;
      const urls = prepareUrls(protocol, HOST, port);
      // Create a webpack compiler that is configured with custom messages.
      const compiler = createCompiler(webpack, config, appName, urls, projectName);
      // Load proxy config
      const proxySetting = require(paths.appPackageJson).proxy;

      // 添加响应头
      if (proxySetting && typeof proxySetting === 'object') {
        Object.keys(proxySetting).forEach((proxy) => {
          proxySetting[proxy].onProxyRes = function(proxyRes, req, res) {
            proxyRes.headers['x-real-origin'] = proxySetting[proxy].target;
          };
        });
      }

      const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
      // Serve webpack assets generated by the compiler over a web sever.

      const serverConfig = createDevServerConfig(
        proxyConfig,
        urls.lanUrlForConfig
      );
      const devServer = new WebpackDevServer(compiler, serverConfig);
      // Launch WebpackDevServer.
      devServer.listen(port, HOST, err => {
        if (err) {
          return console.log(err);
        }
        if (isInteractive) {
          clearConsole();
        }
        console.log(chalk.cyan('正在启动服务...\n'));
        openBrowser(urls.localUrlForBrowser);
      });

      ['SIGINT', 'SIGTERM'].forEach(function(sig) {
        process.on(sig, function() {
          devServer.close();
          process.exit(1);
        });
      });
    })
    .catch(err => {
      if (err && err.message) {
        console.log(err.message);
      }
      process.exit(1);
    });
};

module.exports = reactDev;
